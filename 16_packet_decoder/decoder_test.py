from decoder import *


def test_hex2bin_example():
    bin = hex2bin('EE00D40C823060')

    assert bin == '11101110000000001101010000001100100000100011000001100000'


def test_hex2bin_input():
    bin = hex2bin

    assert '1' in bin
    assert '0' in bin


def test_packet_version_and_type():
    packet = Packet.parse('110100101111111000101000')

    assert packet.version == 6
    assert type(packet) == Literal


def test_literal_value():
    packet = Packet.parse('110100101111111000101000')

    assert list(packet.groups()) == ['0111', '1110', '0101']
    assert packet.calculate() == 2021


def test_sub_packets():
    packet = Packet.parse(
        '00111000000000000110111101000101001010010001001000000000')

    assert packet.sub_packets() == [Packet.parse(
        '11010001010'), Packet.parse('0101001000100100')]

    assert type(packet) == Lower


def test_literal_package_length():
    # padded with 3 zeros on the right
    literal = Packet.parse('110100101111111000101000')

    assert len(literal) == 21


def test_operator_package_length():

    operator = Packet.parse(
        '00111000000000000110111101000101001010010001001000000000')

    assert operator.size_header_length() == 15
    assert len(operator) == 49


def test_sum_of_versions_8A004A801A8002F478():
    packet = Packet.parse(hex2bin('8A004A801A8002F478'))

    assert sum_of_versions(packet) == 16


def test_sum_of_versions_C0015000016115A2E0802F182340():
    packet = Packet.parse(hex2bin('C0015000016115A2E0802F182340'))

    assert sum_of_versions(packet) == 23


def test_sum_of_versions_A0016C880162017C3686B18A3D4780():
    packet = Packet.parse(hex2bin('A0016C880162017C3686B18A3D4780'))

    assert sum_of_versions(packet) == 31
